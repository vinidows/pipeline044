name: Testes
on:
    workflow_call:

jobs:
    unit-test:
          name: Teste de unidade
          runs-on: ubuntu-latest
          steps:
            - name: Pegando o codigo do projeto 
              uses: actions/checkout@v4
            - name: Setup dotnet
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: "8.0.300"
            - name: Execução de unidade
              working-directory: ./src
              run: dotnet test ./Review-Filmes.Test.Unit/Review-Filmes.Test.Unit.csproj

    integration-test:
        name: teste de integration
        runs-on: ubuntu-latest
        services:
          postgre:
              image: postgres:latest
              ports:
                  - 5432:5432
              env:
                  POSTGRES_USER: testeint
                  POSTGRES_PASSWORD: postgrespwd
                  POSTGRES_DB: testeint
        steps:
            - name: Pegando o codigo do projeto 
              uses: actions/checkout@v4

            - name: Setup dotnet
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: "8.0.300"

            - name: Execução de unidade
              working-directory: ./src
              run: dotnet test ./Review-Filmes.Test.Unit/Review-Filmes.Test.Unit.csproj

              env:
                ConnectionStrings_DefaltConnection: "Host=localhost;Port=5432;Database=testeint;Username=testeint;Password=postgrespwd"

    sonarqube:
        name: SCAN sonarqube
        runs-on: ubuntu-latest 
        steps:
            - name: Pegando o codigo do projeto 
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: SETUP .NET SDK
              uses: actions/setup-dotnet@v4
              with:
                # Substitua '8.0.x' pela versão do .NET do seu projeto
                dotnet-version: '8.0.x'

            - name: Cache SonarCloud packages
              uses: actions/cache@v4
              with:
                path: ~/.sonar/cache
                key: ${{ runner.os }}-sonar
                restore-keys: ${{ runner.os }}-sonar
          
            - name: Cache SonarCloud scanner
              id: cache-sonar-scanner
              uses: actions/cache@v4
              with:
                path: ${{ runner.temp }}\scanner
                key: ${{ runner.os }}-sonar-scanner
                restore-keys: ${{ runner.os }}-sonar-scanner
                
            - name: Install SonarCloud scanner
              if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
              run: |
                mkdir -p ${{ runner.temp }}/scanner
                dotnet tool update dotnet-sonarscanner --tool-path ${{ runner.temp }}/scanner
                
            - name: Build and analyze
              env:
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
              run: |
                SCANNER_PATH="${{ runner.temp }}/scanner/dotnet-sonarscanner"
                
                "$SCANNER_PATH" begin \
                  /k:"vinidows_pipeline044" \
                  /o:"vinidows" \
                  /d:sonar.host.url="https://sonarcloud.io"
                
                dotnet build Review-Filmes.sln
              
                "$SCANNER_PATH" end

