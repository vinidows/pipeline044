name: Testes
on:
    workflow_call:

jobs:
    unit-test:
          name: Teste de unidade
          runs-on: ubuntu-latest
          steps:
            - name: Pegando o codigo do projeto 
              uses: actions/checkout@v4
            - name: Setup dotnet
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: "8.0.300"
            - name: Execução de unidade
              working-directory: ./src
              run: dotnet test ./Review-Filmes.Test.Unit/Review-Filmes.Test.Unit.csproj

    integration-test:
        name: teste de integration
        runs-on: ubuntu-latest
        services:
          postgre:
              image: postgres:latest
              ports:
                  - 5432:5432
              env:
                  POSTGRES_USER: testeint
                  POSTGRES_PASSWORD: postgrespwd
                  POSTGRES_DB: testeint
        steps:
            - name: Pegando o codigo do projeto 
              uses: actions/checkout@v4

            - name: Setup dotnet
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: "8.0.300"

            - name: Execução de unidade
              working-directory: ./src
              run: dotnet test ./Review-Filmes.Test.Unit/Review-Filmes.Test.Unit.csproj

              env:
                ConnectionStrings_DefaltConnection: "Host=localhost;Port=5432;Database=testeint;Username=testeint;Password=postgrespwd"

    sonarqube:
        name: SCAN sonarqube
        runs-on: ubuntu-latest
        permissions:
          contents: read 
          actions: write
        steps:
            - name: Pegando o codigo do projeto 
              uses: actions/checkout@v4

            - name: SETUP JDK
              uses: actions/setup-java@v4
              with:
                java-version: '21'
                distribution: 'adopt'
            - name: SETUP dotnet
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: '8.0.x'    

            - name: Install SonarCloud 
              run: dotnet tool install --global dotnet-sonarscanner

            - name: build e analise
              working-directory: ./src
              run: |
                dotnet sonarscanner begin \
                /o:"vinidows" \
                /k:"vinidows_pipeline044" \
                /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
                dotnet build
                dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
                
            - name: Debug Secret Access
              working-directory: ./src
              run: |
                # Esta linha imprime "true" se a variável tiver um valor, e "false" se estiver vazia.
                echo "SONAR_TOKEN está definido? ${{ secrets.SONAR_TOKEN != '' }}"
                
                # Adicione a linha abaixo APENAS para ver se o valor da variável está sendo lido
                # Lembre-se que o GitHub Actions CENSURA a saída, mas pode não cobrir tudo.
                # Remova esta linha após o teste!
                echo "Token (Censurado): ${{ secrets.SONAR_TOKEN }}"               
