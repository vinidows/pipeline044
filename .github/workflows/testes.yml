name: Testes
on:
    workflow_call:

jobs:
    unit-test:
          name: Teste de unidade
          runs-on: ubuntu-latest
          steps:
            - name: Pegando o codigo do projeto 
              uses: actions/checkout@v4
            - name: Setup dotnet
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: "8.0.300"
            - name: Execução de unidade
              working-directory: ./src
              run: dotnet test ./Review-Filmes.Test.Unit/Review-Filmes.Test.Unit.csproj

    integration-test:
        name: teste de integration
        runs-on: ubuntu-latest
        services:
          postgre:
              image: postgres:latest
              ports:
                  - 5432:5432
              env:
                  POSTGRES_USER: testeint
                  POSTGRES_PASSWORD: postgrespwd
                  POSTGRES_DB: testeint
        steps:
            - name: Pegando o codigo do projeto 
              uses: actions/checkout@v4

            - name: Setup dotnet
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: "8.0.300"

            - name: Execução de unidade
              working-directory: ./src
              run: dotnet test ./Review-Filmes.Test.Unit/Review-Filmes.Test.Unit.csproj

              env:
                ConnectionStrings_DefaltConnection: "Host=localhost;Port=5432;Database=testeint;Username=testeint;Password=postgrespwd"

    # sonarqube:
    #     name: SCAN sonarqube
    #     runs-on: ubuntu-latest 
    #     steps:
    #         - name: Pegando o codigo do projeto 
    #           uses: actions/checkout@v4

    #         - name: SETUP JDK
    #           uses: actions/setup-java@v4
    #           with:
    #             java-version: '21'        
    sonarqube:
        name: SonarQube
        on:
          push:
            branches:
              - main
          pull_request:
            types: [opened, synchronize, reopened]
        jobs:
          build:
            name: Build and analyze
            runs-on: windows-latest
            steps:
              - name: Set up JDK 17
                uses: actions/setup-java@v4
                with:
                  java-version: 17
                  distribution: 'zulu' # Alternative distribution options are available.
              - uses: actions/checkout@v4
                with:
                  fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
              - name: Cache SonarQube Cloud packages
                uses: actions/cache@v4
                with:
                  path: ~\sonar\cache
                  key: ${{ runner.os }}-sonar
                  restore-keys: ${{ runner.os }}-sonar
              - name: Cache SonarQube Cloud scanner
                id: cache-sonar-scanner
                uses: actions/cache@v4
                with:
                  path: ${{ runner.temp }}\scanner
                  key: ${{ runner.os }}-sonar-scanner
                  restore-keys: ${{ runner.os }}-sonar-scanner
              - name: Install SonarQube Cloud scanner
                if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
                shell: powershell
                run: |
                  New-Item -Path ${{ runner.temp }}\scanner -ItemType Directory
                  dotnet tool update dotnet-sonarscanner --tool-path ${{ runner.temp }}\scanner
              - name: Build and analyze
                env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                shell: powershell
                run: |
                  ${{ runner.temp }}\scanner\dotnet-sonarscanner begin /k:"vinidows_pipeline044" /o:"vinidows" /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
                  dotnet build
                  ${{ runner.temp }}\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
